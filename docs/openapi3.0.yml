openapi: 3.0.3
info:
  title: SimpleQ - API documentation
  version: 1.0.0
  description: The API specification for the SimpleQ project
servers:
  - url: https://simpleq.local
  - url: http://localhost:3000

components:
  schemas:
    Author: 
      type: object
      properties:
        id:   
          type: string
          description: the id of the author
        name: 
          type: string
        type: 
          type: string
          enum: ["user", "pro", "ai"]       
    Question:
      type: object
      properties:
        id: 
          type: string
        title: 
          type: string
        content: 
          type: string
        tags: 
          type: array
          items:
            type: string
        likes: 
          type: integer
        dislikes:
          type: integer
        answers:
          type: integer
        created:
          type: string
          description: The date, the question was created
        updated: 
          type: string
          description: The date, the question was last updated
        author: 
           $ref: '#/components/schemas/Author'
            
    CreateQuestion:
      type: object
      properties:
        title:
          type: string
          nullable: false
        content: 
          type: string
          nullable: false
        genAI:
          type: boolean
          description: Will be validated in the backend for user permission
          default: false
    UpdateUser:
      type: object
      properties:
        newName:
          type: string
          description: 'New name for user'
          default: false
        # userStatus TODO
    
    Profile:
      allOf:
        - $ref: '#/components/schemas/ProfileShort'
      type: object
      properties:
        userStatistics:
          type: object
          description: 'statistics for user activity, can be used to create diagrams'
          properties:
            TODO:
              type: integer
              description: TODO
        activityPoints: 
          type: integer
        expertTopics:
          type: array
          items:
            type: object
            properties:
              tagName: 
                type: string
              points: 
                type: integer

    ProfileShort:
      type: object
      properties:
        name:
          type: string
          nullable: true
        profilePicture:
          type: string
          description: 'link to profile picture'
          nullable: true
        registrationDate:
          type: string
          description: 'date when user was registered'
          nullable: false
        accountState:
          type: string
          enum: ["registered", "pro"]
        expertTopics:
          type: array
          items:
            type: string
          description: 'list of topics, where the individual user is expert'
    Quest:
      type: object
      properties:
        title: 
          type: string
        description:
          type: string
        points:
          type: integer
        done:
          type: boolean
    LoginAttempt:
      type: object
      properties:
        date: 
          type: string
          description: The date of the login attempt
        successfull: 
          type: boolean

        
tags:
  - name: questions
    description: All information in the questions
  - name: user
    description: All information related to users
  - name: tag
    description: All requests related to tags
  - name: favorites
    description: All requests related to favorites
  - name: quests
    description: All requests related to quests
  - name: login
    description: All login related requests not needed for ory
  - name: special
    description: A special requests for special requirements
    
 
paths:
  /question/trending:
    get: 
      tags :
        - questions
      summary: Get the most upvoted questions of the past seven days
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '401':
          description: User is not logged in
  
  /question/search/:
    get:
      tags:
        - questions
      parameters:
        - in: query
          name: q # searchString
          description: The string to search for
          required: true
          schema: 
            type: string
        - in: query
          name: sortBy
          required: false
          description: Sort the answer by given criteria
          schema: 
            type: string
            enum: [ldr, likes, dislikes, timestamp]
            default: ldr
        - in: query
          name: sortDirection
          required: false
          description: The direction of order, either ASC or DESC
          schema: 
            type: string
            enum: [asc, desc]
            default: desc
        - in: query
          name: offset
          required: false
          description: Ignore x amount of answers
          schema: 
            type: integer
            default: 0
        - in: query
          name: limit
          required: false
          description: Limit the amount of answers
          schema: 
            type: integer
            default: 10
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '401':
          description: User is not logged in

  /question/{questionId}:
    get: 
      tags:
        - questions
      summary: Get a details to a single question
      parameters:
        - in: path
          name: questionId
          required: true
          description: UUID of a question
          schema:
            type: string
      responses:
        '200':
          description: Successfully fetched a single question
          content:
            application/json: 
              schema: 
                $ref: '#/components/schemas/Question'
        '404':
          description: Not found
  /question/{questionId}/answers:
    get: 
      tags:
        - questions
      summary: Get a answers to a single question
      parameters:
        - in: path
          name: questionId
          required: true
          description: UUID of a question
          schema:
            type: string
        - in: query
          name: sortBy
          required: false
          description: Sort the answer by given criteria
          schema: 
            type: string
            enum: [ldr, likes, dislikes, timestamp]
            default: ldr
        - in: query
          name: sortDirection
          required: false
          description: The direction of order, either ASC or DESC
          schema: 
            type: string
            enum: [asc, desc]
            default: desc
        - in: query
          name: offset
          required: false
          description: Ignore x amount of answers
          schema: 
            type: integer
            default: 0
        - in: query
          name: limit
          required: false
          description: Limit the amount of answers
          schema: 
            type: integer
            default: 10
            minimum: 0
            maximum: 50
        - in: query
          name: enableAI
          required: false
          description: Should the AI answer be returned
          schema: 
            type: boolean
            default: true
      responses:
        '200':
          description: Successfully fetched a single question
          content:
            application/json: 
              schema: 
                $ref: '#/components/schemas/Question'
        '404':
          description: Not found      
  /question/create:
    post: 
      responses:
        '200': 
          description: TODO
      tags: 
       - questions
      summary: Create a new question
      requestBody:
        description: the data that needs to be send
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateQuestion'
  /tags/find:
    get: 
      tags:
        - tag
      description: Find possible results for a given tag
      parameters:
        - in: query
          name: tag
          schema:
            type: string
            default: ""
            description: The tag to search for
      responses:
        '200': 
          description: Returns an array of possible same tags or nothing
          content:
            application/json:
              schema:
                type: array
                description: The array of tags
                items: 
                  type: string
  
  /profile/{userId}:
    get:
      tags:
        - user
      description: 'basic information of users, can be used for overviews'
      parameters: []
      responses:
        '200':
          description: TODO TODO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileShort'
        '404':
          description: 'User does not exist'
  /profile/{userId}/profile:
    get:
      tags:
        - user
      description: 'detailed information for one user, can be used for profiles'
      parameters: []
      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '404':
          description: 'User does not exist'
  
  /profile/{userId}/update:
    put: 
      tags:
        - user
      responses:
        '200': 
          description: TODO
        '401':
          description: 'Unauthorized'
      requestBody:
        description: the data that needs to be send
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
  /favorites:
    get: 
      tags:
        - favorites
      description: get all your favourite questions
      responses:
        '200': 
          description: Sucess
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Question'
  /favorites/{questionId}: 
    post: 
      tags:
        - favorites
      parameters:
        - in: path
          name: questionId
          required: true
          schema:
            type: string
      description: Add a question to your favorites
      responses:
        '200': 
          description: 'Success'
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Question'
        '401':
          description: 'Unauthorized'
        '403':
          description: 'Forbidden: The user has reached its maximum amount of favorites. Link to upgrade to premium page'
    delete:
      tags:
        - favorites
      parameters:
        - in: path
          name: questionId
          required: true
          schema:
            type: string
      description: Remove a question to your favorites
      responses:
        '200': 
          description: 'Success'
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Question'
        '401':
          description: 'Unauthorized'
        
  /quests:
    get: 
      tags:
        - quests
      responses:
        '200': 
          description: Returns all the quests of a user
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Quest'
        '401':  
          description: 'Unauthorized'

  /login/attemps: 
    get: 
      tags:
        - login
      responses:
        '200': 
          description: Returns the log of login attemps
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/LoginAttempt'
        '401':  
          description: 'Unauthorized'

      

  /whatWasMyPassword/{userId}:
    get:
      tags:
      - special
      responses:
        '418':
          description: 'Never gonna give you up'
          
          
    



